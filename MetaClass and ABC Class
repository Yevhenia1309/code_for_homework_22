Домашнее задание
1) Реализуйте метакласс, который обладает следующим функционалом: при
его использовании в файл с заранее определенным названием нужно
сохранить имя класса и список его полей.

class Meta_Class(type):

    def __new__(cls, name, bases, dct):
        return super(Meta_Class, cls).__new__(cls, name, bases, dct)

    def __init__(cls, name, bases, dct):
        with open('Meta_Rectangle.txt', 'w') as f:
            f.write(f'{name} {bases} {dct}')

class Rectangle(metaclass = Meta_Class):

    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def __str__(self):
        return f'{self.length} * {self.width}'

rectangle_1 = Rectangle(5, 7)

print(rectangle_1)


Домашнее задание
1) Создайте ABC класс с абстрактным методом проверки целого числа на
простоту. Т.е., если параметром этого метода является целое число и оно
простое, то метод должен вернуть True, а в противном случае False.

import abc

class AbstractValidator(abc.ABC):

    @abc.abstractmethod
    def validate(self, value):
        'Validate str'

2) Создайте класс его наследующий.

class PrimesValidator(AbstractValidator):

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return f'{self.value}'

    def validate(self, value: int):
        if value < 2:
            return False
        for i in range(2, (value // 2) + 1):
            if value % i == 0:
                return False
        return True

validator_1 = PrimesValidator(5)
print(validator_1)
print(validator_1.validate(5))
print(isinstance(validator_1, AbstractValidator))

3) Создайте класс, который не наследует пользовательский ABC класс, но
обладает нужным методом. Зарегистрируйте его в качестве виртуального
подкласса.

class Person:

    def __init__(self, name: str, surname: str, age: int):
        self.name = name
        self.surname = surname
        self.age = age


    def __str__(self):
        return f'{self.name} {self.surname}, age: {self.age} years old'

AbstractValidator.register(Person)

person_1 = Person('Alexander', 'Tvix', 18)
print(person_1)
print(isinstance(person_1, AbstractValidator))

4) Проверьте работоспособность проекта.

import abc

class AbstractValidator(abc.ABC):

    @abc.abstractmethod
    def validate(self, value):
        'Validate str'

class PrimesValidator(AbstractValidator):

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return f'{self.value}'

    def validate(self, value: int):
        if value < 2:
            return False
        for i in range(2, (value // 2) + 1):
            if value % i == 0:
                return False
        return True

validator_1 = PrimesValidator(5)
print(validator_1)
print(validator_1.validate(5))
print(isinstance(validator_1, AbstractValidator))

class Person:

    def __init__(self, name: str, surname: str, age: int):
        self.name = name
        self.surname = surname
        self.age = age


    def __str__(self):
        return f'{self.name} {self.surname}, age: {self.age} years old'

AbstractValidator.register(Person)

person_1 = Person('Alexander', 'Tvix', 18)
print(person_1)
print(isinstance(person_1, AbstractValidator))

5
True
True
Alexander Tvix, age: 18 years old
True
